{
  "name": "coveralls",
  "description": "takes json-cov output into stdin and POSTs to coveralls.io",
  "keywords": [
    "coverage",
    "coveralls"
  ],
  "version": "2.7.1",
  "bugs": {
    "url": "https://github.com/cainus/node-coveralls/issues"
  },
  "scripts": {
    "test": "make test"
  },
  "bin": {
    "coveralls": "./bin/coveralls.js"
  },
  "maintainers": [
    {
      "name": "Gregg Caines",
      "email": "gregg@caines.ca",
      "url": "http://caines.ca"
    }
  ],
  "contributors": [
    {
      "name": "Alan Gutierrez",
      "email": "alan@prettyrobots.com",
      "url": "http://www.prettyrobots.com/"
    },
    {
      "name": "Kir Belevich",
      "url": "https://github.com/svg"
    },
    {
      "name": "elliotcable",
      "email": "github@elliottcable.name",
      "url": "http://elliottcable.name/"
    },
    {
      "name": "Slotos",
      "email": "slotos@gmail.com",
      "url": "http://slotos.net"
    },
    {
      "name": "mattjmorrison",
      "email": "mattjmorrison@mattjmorrison.com",
      "url": "http://mattjmorrison.com"
    },
    {
      "name": "Arpad Borsos",
      "email": "arpad.borsos@googlemail.com",
      "url": "http://swatinem.de/"
    }
  ],
  "dependencies": {
    "yaml": "0.2.3",
    "request": "2.16.2",
    "lcov-parse": "0.0.4",
    "log-driver": "1.2.1"
  },
  "devDependencies": {
    "sinon-restore": "1.0.0",
    "mocha-lcov-reporter": "0.0.1",
    "mocha": "1.8.1",
    "should": "1.1.0",
    "istanbul": "0.1.45",
    "jshint": "2.1.3"
  },
  "engines": {
    "node": ">=0.8.6"
  },
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cainus/node-coveralls.git"
  },
  "author": {
    "name": "Gregg Caines"
  },
  "license": "BSD",
  "readme": "#node-coveralls\n[![Build Status](https://travis-ci.org/cainus/node-coveralls.png?branch=master)](https://travis-ci.org/cainus/node-coveralls)\n[![Coverage Status](https://coveralls.io/repos/cainus/node-coveralls/badge.png?branch=master)](https://coveralls.io/r/cainus/node-coveralls?branch=master)\n[![Codeship Build Status](https://www.codeship.io/projects/de6fb440-dea9-0130-e7d9-122ca7ee39d3/status)](https://www.codeship.io/projects/5622)\n\n[Coveralls.io](https://coveralls.io/) support for node.js.  Get the great coverage reporting of coveralls.io and add a cool coverage button ( like the one above ) to your README.\n\nSupported CI services:  [travis-ci](https://travis-ci.org/), [codeship](https://www.codeship.io/), [circle-ci](https://circleci.com/), [jenkins](http://jenkins-ci.org/)\n\n##Installation: \nAdd the latest version of `coveralls` to your package.json:\n``` \nnpm install coveralls --save \n```\n\nIf you're using mocha, add `mocha-lcov-reporter` to your package.json:\n``` \nnpm install mocha-lcov-reporter --save \n```\n\n##Usage:\n\nThis script ( `bin/coveralls.js` ) can take standard input from any tool that emits the lcov data format (including [mocha](http://visionmedia.github.com/mocha/)'s [LCov reporter](https://npmjs.org/package/mocha-lcov-reporter)) and send it to coveralls.io to report your code coverage there.\n\nOnce your app is instrumented for coverage, and building, you need to pipe the lcov output to `./node_modules/coveralls/bin/coveralls.js`.\n\nThis library currently supports [travis-ci](https://travis-ci.org/) with no extra effort beyond that, but if \nyou're using a different build system, there are a few environment variables that are necessary:\n* COVERALLS_SERVICE_NAME  (the name of your build system)\n* COVERALLS_REPO_TOKEN (the secret repo token from coveralls.io)\n\nThere are optional environment variables for other build systems as well:\n* COVERALLS_SERVICE_JOB_ID  (an id that uniquely identifies the build job)\n* COVERALLS_RUN_AT  (a date string for the time that the job ran.  RFC 3339 dates work.  This defaults to your \nbuild system's date/time if you don't set it.)\n\n### [Mocha](http://visionmedia.github.io/mocha/) + [Blanket.js](https://github.com/alex-seville/blanket)\n- Install [blanket.js](http://blanketjs.org/)\n- Configure blanket according to [docs](https://github.com/alex-seville/blanket/blob/master/docs/getting_started_node.md).\n- Run your tests with a command like this:\n\n```sh\nNODE_ENV=test YOURPACKAGE_COVERAGE=1 ./node_modules/.bin/mocha \\\n  --require blanket \\\n  --reporter mocha-lcov-reporter | ./node_modules/coveralls/bin/coveralls.js\n```\n### [Mocha](http://visionmedia.github.io/mocha/) + [JSCoverage](https://github.com/fishbar/jscoverage)\n\nInstrumenting your app for coverage is probably harder than it needs to be (read [here](http://www.seejohncode.com/2012/03/13/setting-up-mocha-jscoverage/) or [here](http://tjholowaychuk.com/post/18175682663/mocha-test-coverage)), but that's also a necessary step. \n\nIn mocha, if you've got your code instrumented for coverage, the command for a travis build would look something like this:\n```sh\nYOURPACKAGE_COVERAGE=1 ./node_modules/.bin/mocha test -R mocha-lcov-reporter | ./node_modules/coveralls/bin/coveralls.js\n```\nCheck out an example [Makefile](https://github.com/cainus/urlgrey/blob/master/Makefile) from one of my projects for an example, especially the test-coveralls build target.  Note: Travis runs `npm test`, so whatever target you create in your Makefile must be the target that `npm test` runs (This is set in package.json's 'scripts' property).\n\n### [Istanbul](https://github.com/gotwarlost/istanbul)\n```sh\nistanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage\n```\n\n### [Nodeunit](https://github.com/caolan/nodeunit) + [JSCoverage](https://github.com/fishbar/jscoverage)\n\nDepend on nodeunit, jscoverage and coveralls:\n\n```sh\nnpm install nodeunit jscoverage coveralls --save-dev\n```\n\nAdd a coveralls script to \"scripts\" in your `package.json`:\n\n```javascript\n\"scripts\": {\n  \"test\": \"nodeunit test\",\n  \"coveralls\": \"jscoverage lib && YOURPACKAGE_COVERAGE=1 nodeunit --reporter=lcov test | coveralls\"\n}\n```\n\nEnsure your app requires instrumented code when `process.env.YOURPACKAGE_COVERAGE` variable is defined.\n\nRun your tests with a command like this:\n\n```sh\nnpm run coveralls\n```\n\nFor detailed instructions on requiring instrumented code, running on Travis and submitting to coveralls [see this guide](https://github.com/alanshaw/nodeunit-lcov-coveralls-example).\n\n### [Poncho](https://github.com/deepsweet/poncho)\nClient-side JS code coverage using [PhantomJS](https://github.com/ariya/phantomjs), [Mocha](https://github.com/visionmedia/mocha) and [Blanket](https://github.com/alex-seville/blanket):\n- [Configure](http://visionmedia.github.io/mocha/#browser-support) Mocha for browser\n- [Mark](https://github.com/deepsweet/poncho#usage) target script(s) with `data-cover` html-attribute\n- Run your tests with a command like this:\n\n```sh\n./node_modules/.bin/poncho -R lcov test/test.html | ./node_modules/coveralls/bin/coveralls.js\n```\n\n## Running locally\n\nIf you're running locally, you must have a `.coveralls.yml` file, as documented in [their documentation](https://coveralls.io/docs/ruby), with your `repo_token` in it; or, you must provide a `COVERALLS_REPO_TOKEN` environment-variable on the command-line.\n\nIf you want to send commit data to coveralls, you can set the `COVERALLS_GIT_COMMIT` environment-variable to the commit hash you wish to reference. If you don't want to use a hash, you can set it to `HEAD` to supply coveralls with the latest commit data. This requires git to be installed and executable on the current PATH.\n\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/cainus/node-coveralls",
  "_id": "coveralls@2.7.1",
  "dist": {
    "shasum": "8de3339cf6b642058e658ae683101f9a10ff7bea"
  },
  "_from": "coveralls@~2.7.1",
  "_resolved": "https://registry.npmjs.org/coveralls/-/coveralls-2.7.1.tgz"
}
