{"ts":1364479779387,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var fs = require('fs'),\n    path = require('path'),\n    exists = fs.exists || path.exists;\n\nvar walkFile = function(str, cb) {\n    var data = [], item = {};\n\n    str = str.split('\\n');\n    str.forEach(function(line) {\n        line = line.trim();\n\n        var parts = line.split(':'), lines, fn;\n\n        switch (parts[0].toUpperCase()) {\n            case 'TN':\n                item.title = parts[1].trim();\n                break;\n            case 'SF':\n                item.file = parts[1].trim();\n                break;\n            case 'FNF':\n                item.functions.found = Number(parts[1].trim());\n                break;\n            case 'FNH':\n                item.functions.hit = Number(parts[1].trim());\n                break;\n            case 'LF':\n                item.lines.found = Number(parts[1].trim());\n                break;\n            case 'LH':\n                item.lines.hit = Number(parts[1].trim());\n                break;\n            case 'DA':\n                if (!item.lines) {\n                    item.lines = {\n                        found: 0,\n                        hit: 0,\n                        details: []\n                    };\n                }\n                lines = parts[1].split(',');\n                item.lines.details.push({\n                    line: Number(lines[0]),\n                    hit: Number(lines[1])\n                });\n                break;\n            case 'FN':\n                if (!item.functions) {\n                    item.functions = {\n                        hit: 0,\n                        found: 0,\n                        details: []\n                    };\n                }\n                fn = parts[1].split(',');\n                item.functions.details.push({\n                    name: fn[1],\n                    line: Number(fn[0])\n                });\n                break;\n            case 'FNDA':\n                fn = parts[1].split(',');\n                item.functions.details.some(function(i, k) {\n                    if (i.name === fn[1] && i.hit === undefined) {\n                        item.functions.details[k].hit = Number(fn[0]);\n                        return true;\n                    }\n                });\n                break;\n            case 'BRDA':\n                if (!item.branches) {\n                    item.branches = {\n                        hit: 0,\n                        found: 0,\n                        details: []\n                    };\n                }\n                fn = parts[1].split(',');\n                item.branches.details.push({\n                    line: Number(fn[0]),\n                    block: Number(fn[1]),\n                    branch: Number(fn[2]),\n                    taken: ((fn[3] === '-') ? 0 : Number(fn[3]))\n                });\n                break;\n            case 'BRF':\n                item.branches.found = Number(parts[1]);\n                break;\n            case 'BRH':\n                item.branches.hit = Number(parts[1]);\n                break;\n        }\n\n        if (line.indexOf('end_of_record') > -1) {\n            data.push(item);\n            item = {};\n        }\n    });\n    if (data.length) {\n        cb(null, data);\n    } else {\n        cb('Failed to parse string', null);\n    }\n};\n\nvar parse = function(file, cb) {\n    exists(file, function(x) {\n        if (!x) {\n            return walkFile(file, cb);\n        }\n        fs.readFile(file, 'utf8', function(err, str) {\n            walkFile(str, cb);\n        });\n    });\n\n};\n\n\nmodule.exports = parse;\n"]],"start1":0,"start2":0,"length1":0,"length2":3500}]],"length":3500}
{"contributors":[],"silentsave":false,"ts":1364479888124,"patch":[[{"diffs":[[0,"ing'"],[-1,", null"],[0,");\n "]],"start1":3210,"start2":3210,"length1":14,"length2":8}]],"length":3494,"saved":false}
