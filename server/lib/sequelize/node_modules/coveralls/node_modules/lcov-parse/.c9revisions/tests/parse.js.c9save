{"ts":1364479832027,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var vows = require('vows'),\n    path = require('path'),\n    assert = require('assert'),\n    parse = require('../lib'),\n    yuiFile = path.join(__dirname, 'info/parts.info');\n\nvar tests = {\n    'Should be loaded': {\n        topic: function() {\n            return parse;\n        },\n        'should be a function': function(topic) {\n            assert.isFunction(topic);\n        }\n    },\n    'Catch bad file passing': {\n        topic: function() {\n            parse('foobar', this.callback);\n        },\n        'should return an error': function(err, data) {\n            assert.isUndefined(data);\n            assert.isString(err);\n        }\n    },\n    'parse the file': {\n        topic: function() {\n            parse(yuiFile, this.callback);\n        },\n        'should return an array': function(err, data) {\n            assert.isNull(err);\n            assert.isArray(data);\n        },\n        'should contain 2 keys': function(err, data) {\n            assert.equal(data.length, 2);\n        },\n        'first key should have 4 properties': function(err, data) {\n            var d = data[0];\n            assert.deepEqual(Object.keys(d), [ 'title', 'file', 'functions', 'lines' ]);\n        },\n        'verify test titles': function(err, data) {\n            assert.equal(data[0].title, 'Test #1');\n            assert.equal(data[1].title, 'Test #2');\n        },\n        'verify test files': function(err, data) {\n            assert.equal(data[0].file, 'anim-base/anim-base-coverage.js');\n            assert.equal(data[1].file, 'anim-easing/anim-easing-coverage.js');\n        },\n        'verify number of functions': function(err, data) {\n            assert.equal(data[0].functions.found, 29);\n            assert.equal(data[0].functions.hit, 23);\n            assert.equal(data[1].functions.found, 17);\n            assert.equal(data[1].functions.hit, 17);\n        },\n        'verify number of branches': function(err, data) {\n            assert.equal(data[1].branches.found, 23);\n            assert.equal(data[1].branches.hit, 22);\n            assert.equal(data[1].branches.found, data[1].branches.details.length);\n            assert.equal(data[1].branches.details[data[1].branches.details.length - 1].taken, 0);\n        },\n        'verify function details': function(err, data) {\n            assert.equal(data[0].functions.details.length, 29);\n            assert.equal(data[1].functions.details.length, 17);\n            assert.deepEqual(data[0].functions.details[0], { name: '(anonymous 1)', line: 7, hit: 6 });\n            assert.deepEqual(data[0].functions.details[11], { name: '_start', line: 475, hit: 231 });\n\n            assert.deepEqual(data[0].functions.details[27], { name: 'stop', line: 466, hit: 9 });\n            assert.deepEqual(data[0].functions.details[28], { name: 'stop', line: 389, hit: 0 });\n\n            assert.deepEqual(data[1].functions.details[4], { name: 'bounceBoth', line: 345, hit: 36 });\n\n        },\n        'verify number of lines': function(err, data) {\n            assert.equal(data[0].lines.found, 181);\n            assert.equal(data[0].lines.hit, 143);\n            assert.equal(data[1].lines.found, 76);\n            assert.equal(data[1].lines.hit, 70);\n        },\n        'verify line details': function(err, data) {\n            assert.equal(data[0].lines.details.length, 181);\n            assert.equal(data[1].lines.details.length, 76);\n            assert.deepEqual(data[0].lines.details[0], { line: 7, hit: 6 });\n            assert.deepEqual(data[0].lines.details[10], { line: 91, hit: 6 });\n\n            assert.deepEqual(data[1].lines.details[20], { line: 157, hit: 32 });\n            assert.deepEqual(data[1].lines.details[64], { line: 313, hit: 51 });\n        },\n\n    }\n};\n\nvows.describe('Test Loading and Bindings').addBatch(tests)['export'](module);\n\n"]],"start1":0,"start2":0,"length1":0,"length2":3784}]],"length":3784}
{"contributors":[],"silentsave":false,"ts":1364480014761,"patch":[[{"diffs":[[0,"   }\n    },\n"],[1,"    'Parse as a string': {\n        topic: function() {\n            parse('TN:TestName\\nSF:foobar.js\\nend_of_record\\n', this.callback);\n        },\n        'should parse': function(err, data) {\n            assert.isArray(data);\n            console.log(data);\n        }\n    },\n"],[0,"    'parse t"]],"start1":633,"start2":633,"length1":24,"length2":298}]],"length":4058,"saved":false}
{"ts":1364480100118,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(data"],[1,"assert.equal('TestName', data[0].title);\n            assert.equal('foobar.js', data[0].filename"],[0,");\n "]],"start1":879,"start2":879,"length1":24,"length2":103}]],"length":4137,"saved":false}
{"ts":1364480129869,"patch":[[{"diffs":[[0,"[0].file"],[-1,"name"],[0,");\n     "]],"start1":966,"start2":966,"length1":20,"length2":16}]],"length":4133,"saved":false}
